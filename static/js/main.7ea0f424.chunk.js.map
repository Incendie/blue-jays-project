{"version":3,"sources":["Reducers/fetchReducer.ts","Reducers/filterReducer.ts","Reducers/index.ts","store.ts","Components/Teams.tsx","Actions/fetchActions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchReducer","state","arguments","length","undefined","fetching","fetched","payload","action","type","_objectSpread","initialState","gender","colors","style","patterns","items","filtersSelected","firstLoad","filterReducer","includes","filterName","push","filterReducer_objectSpread","filter","e","reducer","combineReducers","fetch","filters","middleware","applyMiddleware","promise","thunk","logger","createStore","Inspirations","connect","require","store","teams","this","props","dispatch","axios","method","params","sportId","baseURL","then","response","data","catch","err","react_default","a","createElement","id","className","React","Component","App","es","Teams_Inspirations","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ea0f424.chunk.js","sourcesContent":["const fetchReducer = (\r\n  state = {\r\n    fetching: false,\r\n    fetched: false,\r\n    payload: []\r\n  },\r\n  action: any\r\n) => {\r\n  switch (action.type) {\r\n    case \"FETCH_TEAMS_FULFILLED\":\r\n      return { ...state, fetched: true, payload: action.payload };\r\n    case \"FETCH_FILTERED_EXAMPLES_FULFILLED\":\r\n      return { ...state, fetched: true, payload: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default fetchReducer;\r\n","interface stateTypes {\r\n  gender: string[];\r\n  colors: string[];\r\n  style: string[];\r\n  patterns: string[];\r\n  items: string[];\r\n  filtersSelected: string[];\r\n  firstLoad: boolean;\r\n}\r\nconst initialState: stateTypes = {\r\n  gender: [],\r\n  colors: [],\r\n  style: [],\r\n  patterns: [],\r\n  items: [],\r\n  filtersSelected: [],\r\n  firstLoad: true\r\n};\r\nconst filterReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case \"GENDER_FILTER_SELECTED\":\r\n      if (!state.gender.includes(action.payload.filterName)) {\r\n        state.gender.push(action.payload.filterName);\r\n      }\r\n      return { ...state, firstLoad: false };\r\n    case \"GENDER_FILTER_DESELECTED\":\r\n      let gender = state.gender.filter(e => e !== action.payload.filterName);\r\n      return { ...state, gender, firstLoad: false };\r\n    case \"COLOR_FILTER_SELECTED\":\r\n      if (!state.colors.includes(action.payload.filterName)) {\r\n        state.colors.push(action.payload.filterName);\r\n      }\r\n      return { ...state, firstLoad: false };\r\n    case \"COLOR_FILTER_DESELECTED\":\r\n      let colors = state.colors.filter(e => e !== action.payload.filterName);\r\n      return { ...state, colors, firstLoad: false };\r\n    case \"STYLE_FILTER_SELECTED\":\r\n      if (!state.style.includes(action.payload.filterName)) {\r\n        state.style.push(action.payload.filterName);\r\n      }\r\n      return { ...state, firstLoad: false };\r\n    case \"STYLE_FILTER_DESELECTED\":\r\n      let style = state.style.filter(e => e !== action.payload.filterName);\r\n      return { ...state, style, firstLoad: false };\r\n    case \"PATTERN_FILTER_SELECTED\":\r\n      if (!state.patterns.includes(action.payload.filterName)) {\r\n        state.patterns.push(action.payload.filterName);\r\n      }\r\n      return { ...state, firstLoad: false };\r\n    case \"PATTERN_FILTER_DESELECTED\":\r\n      let patterns = state.patterns.filter(\r\n        e => e !== action.payload.filterName\r\n      );\r\n      return { ...state, patterns, firstLoad: false };\r\n    case \"ITEM_FILTER_SELECTED\":\r\n      if (!state.items.includes(action.payload.filterName)) {\r\n        state.items.push(action.payload.filterName);\r\n      }\r\n      return { ...state, firstLoad: false };\r\n    case \"ITEM_FILTER_DESELECTED\":\r\n      let items = state.items.filter(e => e !== action.payload.filterName);\r\n      return { ...state, items, firstLoad: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default filterReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport fetchReducer from \"./fetchReducer\";\r\nimport filterReducer from \"./filterReducer\";\r\n\r\nconst reducer = combineReducers({\r\n  fetch: fetchReducer,\r\n  filters: filterReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof reducer>;\r\nexport default reducer;\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport promise from \"redux-promise-middleware\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducer from \"./Reducers\";\r\n\r\nconst middleware = applyMiddleware(promise, thunk, logger);\r\n\r\nexport default createStore(reducer, middleware);\r\n","import React from \"react\";\r\nimport { fetchTeams } from \"../Actions/fetchActions\";\r\n\r\nconst { connect } = require(\"react-redux\");\r\n@connect((store: any) => {\r\n  return {\r\n    teams: store.teams\r\n  };\r\n})\r\nexport default class Inspirations extends React.Component<any> {\r\n  componentDidMount() {\r\n    this.props.dispatch(fetchTeams());\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div id=\"teams\" className=\"wrapper\">\r\n        Henlo\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport function fetchTeams() {\r\n  return function(dispatch: any) {\r\n    axios({\r\n      method: \"POST\",\r\n      params: {\r\n        sportId: 1\r\n      },\r\n      baseURL: \"https://statsapi.mlb.com/api/v1/team\"\r\n    })\r\n      .then(response => {\r\n        dispatch({ type: \"FETCH_TEAMS_FULFILLED\", payload: response.data });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: \"FETCH_TEAMS_REJECTED\", payload: err });\r\n      });\r\n  };\r\n}\r\n\r\n// export function fetchOutfitExamples(filter: any) {\r\n//   return function(dispatch: any) {\r\n//     axios({\r\n//       method: \"POST\",\r\n//       params: {\r\n//         ckAPIToken:\r\n//           \"e77360a702ff8b523c437b5346f3eb4f7424667a1cddea61dedb57dbbd2ab42d\"\r\n//       },\r\n//       baseURL:\r\n//         \"https://api.apple-cloudkit.com/database/1/iCloud.com.lookscopeapp.lookscope/development/public/records/query\",\r\n//       data: {\r\n//         zoneID: {\r\n//           zoneName: \"_defaultZone\"\r\n//         },\r\n//         query: {\r\n//           recordType: \"OutfitExampleSmall\",\r\n//           filterBy: filter\r\n//         }\r\n//       }\r\n//     })\r\n//       .then(response => {\r\n//         dispatch({ type: \"FETCH_EXAMPLES_FULFILLED\", payload: response.data });\r\n//       })\r\n//       .catch(err => {\r\n//         dispatch({ type: \"FETCH_EXAMPLES_REJECTED\", payload: err });\r\n//       });\r\n//   };\r\n// }\r\n\r\n// export function fetchFilteredOutfits(filter: any) {\r\n//   return function(dispatch: any) {\r\n//     axios({\r\n//       method: \"POST\",\r\n//       params: {\r\n//         ckAPIToken:\r\n//           \"e77360a702ff8b523c437b5346f3eb4f7424667a1cddea61dedb57dbbd2ab42d\"\r\n//       },\r\n//       baseURL:\r\n//         \"https://api.apple-cloudkit.com/database/1/iCloud.com.lookscopeapp.lookscope/development/public/records/query\",\r\n//       data: {\r\n//         zoneID: {\r\n//           zoneName: \"_defaultZone\"\r\n//         },\r\n//         query: {\r\n//           recordType: \"OutfitExampleSmall\",\r\n//           filterBy: filter\r\n//         }\r\n//       }\r\n//     })\r\n//       .then(response => {\r\n//         dispatch({\r\n//           type: \"FETCH_FILTERED_EXAMPLES_FULFILLED\",\r\n//           payload: response.data\r\n//         });\r\n//       })\r\n//       .catch(err => {\r\n//         dispatch({ type: \"FETCH_FILTERED_EXAMPLES_REJECTED\", payload: err });\r\n//       });\r\n//   };\r\n// }\r\n\r\n// export function fetchOutfitDetails() {\r\n//   return function(dispatch: any) {\r\n//     axios({\r\n//       method: \"POST\",\r\n//       params: {\r\n//         ckAPIToken:\r\n//           \"e77360a702ff8b523c437b5346f3eb4f7424667a1cddea61dedb57dbbd2ab42d\"\r\n//       },\r\n//       baseURL:\r\n//         \"https://api.apple-cloudkit.com/database/1/iCloud.com.lookscopeapp.lookscope/development/public/records/query\",\r\n//       data: {\r\n//         zoneID: {\r\n//           zoneName: \"_defaultZone\"\r\n//         },\r\n//         query: {\r\n//           recordType: \"OutfitExampleLarge\"\r\n//         }\r\n//       }\r\n//     })\r\n//       .then(response => {\r\n//         dispatch({\r\n//           type: \"FETCH_OUTFIT_DETAILS_FULFILLED\",\r\n//           payload: response.data\r\n//         });\r\n//       })\r\n//       .catch(err => {\r\n//         dispatch({ type: \"FETCH_OUTFIT_DETAILS_REJECTED\", payload: err });\r\n//       });\r\n//   };\r\n// }\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport Teams from \"./Components/Teams\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Teams />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}