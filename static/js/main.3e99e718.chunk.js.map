{"version":3,"sources":["Reducers/fetchReducer.ts","Reducers/filterReducer.ts","Reducers/index.ts","store.ts","Components/Teams/Teams.tsx","Actions/fetchActions.ts","Components/Main.tsx","Actions/filterActions.ts","Components/Teams/Roster.tsx","Components/Teams/Team.tsx","Components/Players/Player.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","fetching","fetched","payload","roster","player","fetchReducer","state","arguments","length","undefined","action","type","_objectSpread","filtered","filterReducer","filterReducer_objectSpread","reducer","combineReducers","fetch","middleware","applyMiddleware","promise","thunk","logger","createStore","Teams","connect","require","store","this","props","dispatch","method","then","response","json","catch","err","teamNames","toFilter","teams","map","team","name","toLowerCase","includes","target","react_default","a","createElement","className","key","id","react_router_dom","to","src","alt","React","Component","Main","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","search","onSubmit","bind","assertThisInitialized","onChange","e","setState","value","preventDefault","onClick","Teams_Teams","Roster","teamid","teamRoster","parentTeamId","jerseyNumber","person","fullName","Team","match","params","teamData","console","log","venue","Teams_Roster","Player","playerid","people","currentAge","birthDate","birthCity","birthStateProvince","birthCountry","height","weight","primaryPosition","abbreviation","draftYear","batSide","description","pitchHand","App","es","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e99e718.chunk.js","sourcesContent":["const initialState = {\r\n    fetching: false,\r\n    fetched: false,\r\n    payload: [],\r\n    roster: [],\r\n    player: []\r\n  },\r\n  fetchReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n      case \"FETCH_TEAMS_FULFILLED\":\r\n        return {\r\n          ...state,\r\n          fetched: true,\r\n          fetching: false,\r\n          payload: action.payload\r\n        };\r\n      case \"FETCH_TEAMS_PENDING\":\r\n        return { ...state, fetched: false, fetching: true };\r\n      case \"FETCH_SELECTED_TEAM_FULFILLED\":\r\n        return {\r\n          ...state,\r\n          fetched: true,\r\n          fetching: false,\r\n          payload: action.payload\r\n        };\r\n      case \"FETCH_SELECTED_TEAM_PENDING\":\r\n        return { ...state, fetched: false, fetching: true };\r\n      case \"FETCH_SELECTED_TEAM_ROSTER_FULFILLED\":\r\n        return {\r\n          ...state,\r\n          fetched: true,\r\n          fetching: false,\r\n          roster: action.payload\r\n        };\r\n      case \"FETCH_SELECTED_TEAM_ROSTER_PENDING\":\r\n        return { ...state, fetched: false, fetching: true };\r\n      case \"FETCH_PLAYER_FULFILLED\":\r\n        return {\r\n          ...state,\r\n          fetched: true,\r\n          fetching: false,\r\n          player: action.payload\r\n        };\r\n      case \"FETCH_PLAYER_PENDING\":\r\n        return { ...state, fetched: false, fetching: true };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\nexport default fetchReducer;\r\n","interface stateTypes {\r\n  filtered: string;\r\n}\r\nconst initialState: stateTypes = {\r\n  filtered: ''\r\n};\r\nconst filterReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case 'FILTER_SUBMITTED':\r\n      return { ...state, filtered: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default filterReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport fetchReducer from './fetchReducer';\r\nimport filterReducer from './filterReducer';\r\n\r\nconst reducer = combineReducers({\r\n  fetch: fetchReducer,\r\n  filtered: filterReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof reducer>;\r\nexport default reducer;\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport promise from \"redux-promise-middleware\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducer from \"./Reducers\";\r\n\r\nconst middleware = applyMiddleware(promise, thunk, logger);\r\n\r\nexport default createStore(reducer, middleware);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { fetchTeams } from \"../../Actions/fetchActions\";\r\nimport \"./styles.scss\";\r\n\r\nconst { connect } = require(\"react-redux\");\r\n@connect((store: any) => {\r\n  return {\r\n    fetch: store.fetch.payload,\r\n    filtered: store.filtered.filtered\r\n  };\r\n})\r\nexport default class Teams extends React.Component<any> {\r\n  componentDidMount() {\r\n    this.props.dispatch(fetchTeams());\r\n  }\r\n\r\n  public render() {\r\n    let teamNames,\r\n      toFilter = this.props.filtered;\r\n    if (this.props.fetch.teams) {\r\n      teamNames = this.props.fetch.teams.map((team: any) => {\r\n        if (\r\n          team.name.toLowerCase().includes(toFilter.target) ||\r\n          !toFilter.target\r\n        ) {\r\n          return (\r\n            <li className=\"teamList\" key={team.id}>\r\n              <div className=\"teamList__logo\">\r\n                <Link to={\"/team/\" + team.id}>\r\n                  <img\r\n                    src={\r\n                      \"https://www.mlbstatic.com/team-logos/\" + team.id + \".svg\"\r\n                    }\r\n                    alt=\"\"\r\n                  />\r\n                </Link>\r\n              </div>\r\n              <p className=\"teamList__name\">{team.name}</p>\r\n            </li>\r\n          );\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div id=\"teams\" className=\"wrapper\">\r\n        <ul>{teamNames ? teamNames : \"Loading Teams\"}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export function fetchTeams() {\r\n  return function(dispatch: any) {\r\n    fetch(\"https://statsapi.mlb.com/api/v1/teams?sportId=1\", {\r\n      method: \"GET\"\r\n    })\r\n      .then(response => {\r\n        dispatch({ type: \"FETCH_TEAMS\", payload: response.json() });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: \"FETCH_TEAMS\", payload: err });\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchTeam(teamid: number) {\r\n  return function(dispatch: any) {\r\n    fetch(\"https://statsapi.mlb.com/api/v1/teams/\" + teamid, {\r\n      method: \"GET\"\r\n    })\r\n      .then(response => {\r\n        dispatch({ type: \"FETCH_SELECTED_TEAM\", payload: response.json() });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: \"FETCH_SELECTED_TEAM\", payload: err });\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchRoster(teamid: number) {\r\n  return function(dispatch: any) {\r\n    fetch(\"https://statsapi.mlb.com/api/v1/teams/\" + teamid + \"/roster\", {\r\n      method: \"GET\"\r\n    })\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"FETCH_SELECTED_TEAM_ROSTER\",\r\n          payload: response.json()\r\n        });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: \"FETCH_SELECTED_TEAM_ROSTER\", payload: err });\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchPlayer(playerid: number) {\r\n  return function(dispatch: any) {\r\n    fetch(\"https://statsapi.mlb.com/api/v1/people/\" + playerid, {\r\n      method: \"GET\"\r\n    })\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"FETCH_PLAYER\",\r\n          payload: response.json()\r\n        });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: \"FETCH_PLAYER\", payload: err });\r\n      });\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nimport Teams from \"./Teams/Teams\";\r\n\r\nimport { filterSubmitted } from \"../Actions/filterActions\";\r\n\r\nconst { connect } = require(\"react-redux\");\r\n\r\ninterface Props {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface State {\r\n  search: string;\r\n}\r\n\r\n@connect((store: any) => {\r\n  return { store };\r\n})\r\nexport default class Main extends React.Component<Props, State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\"\r\n    };\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  onChange(e: any) {\r\n    this.setState({ search: e.target.value });\r\n  }\r\n\r\n  onSubmit(e: any) {\r\n    e.preventDefault();\r\n    this.props.dispatch(filterSubmitted(this.state.search));\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <main>\r\n        <h1>Welcome!</h1>\r\n        <p>What are you looking for today?</p>\r\n        <form onSubmit={this.onSubmit} action=\"submit\">\r\n          <input type=\"text\" onChange={this.onChange} />\r\n          <button type=\"button\" onClick={this.onSubmit}>\r\n            Search\r\n          </button>\r\n        </form>\r\n        <Teams />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","export function filterSubmitted(target: string) {\r\n  return {\r\n    type: 'FILTER_SUBMITTED',\r\n    payload: { target }\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { fetchRoster } from \"../../Actions/fetchActions\";\r\n\r\nconst { connect } = require(\"react-redux\");\r\n@connect((store: any) => {\r\n  return {\r\n    roster: store.fetch.roster.roster\r\n  };\r\n})\r\nclass Roster extends React.Component<any> {\r\n  componentDidMount() {\r\n    this.props.dispatch(fetchRoster(this.props.teamid));\r\n  }\r\n\r\n  render() {\r\n    if (this.props.roster) {\r\n      const teamRoster = this.props.roster.map((player: any) => {\r\n        return (\r\n          <li key={player.parentTeamId + \"_\" + player.jerseyNumber}>\r\n            <Link to={\"/player/\" + player.person.id}>\r\n              {player.person.fullName}\r\n            </Link>\r\n          </li>\r\n        );\r\n      });\r\n      return <div>{teamRoster ? teamRoster : \"map\"}</div>;\r\n    } else {\r\n      return <div>Fetching Roster Data...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Roster;\r\n","import React from \"react\";\r\n\r\nimport { fetchTeam } from \"../../Actions/fetchActions\";\r\n\r\nimport Roster from \"./Roster\";\r\n\r\nconst { connect } = require(\"react-redux\");\r\n@connect((store: any) => {\r\n  return {\r\n    team: store.fetch.payload.teams\r\n  };\r\n})\r\nclass Team extends React.Component<any> {\r\n  componentDidMount() {\r\n    this.props.dispatch(fetchTeam(this.props.match.params.teamid));\r\n  }\r\n\r\n  render() {\r\n    if (this.props.team) {\r\n      const teamData = this.props.team[0];\r\n      return (\r\n        <section>\r\n          <div className=\"team__info\">\r\n            <p className=\"team__name\">{teamData.name}</p>\r\n            <div className=\"team__logo\">\r\n              <img\r\n                src={\r\n                  \"https://www.mlbstatic.com/team-logos/\" +\r\n                  this.props.match.params.teamid +\r\n                  \".svg\"\r\n                }\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className=\"team__park\">\r\n              {console.log(teamData)}\r\n              <img\r\n                src={\r\n                  \"https://prod-gameday.mlbstatic.com/responsive-gameday-assets/1.2.0/images/fields/\" +\r\n                  teamData.venue.id +\r\n                  \".svg\"\r\n                }\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <Roster teamid={this.props.match.params.teamid} />\r\n        </section>\r\n      );\r\n    } else {\r\n      return <div>Fetching Team Info...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Team;\r\n","import React from \"react\";\r\n\r\nimport { fetchPlayer } from \"../../Actions/fetchActions\";\r\n\r\nconst { connect } = require(\"react-redux\");\r\n@connect((store: any) => {\r\n  return {\r\n    player: store.fetch.player\r\n  };\r\n})\r\nclass Player extends React.Component<any> {\r\n  componentDidMount() {\r\n    this.props.dispatch(fetchPlayer(this.props.match.params.playerid));\r\n  }\r\n\r\n  render() {\r\n    if (this.props.player.people) {\r\n      const player = this.props.player.people[0];\r\n      return (\r\n        <main key={player.id}>\r\n          <div className=\"player__photo\">\r\n            <img\r\n              src={\r\n                \"https://securea.mlb.com/mlb/images/players/head_shot/\" +\r\n                this.props.match.params.playerid +\r\n                \".jpg\"\r\n              }\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"player__info\">\r\n            <p>{\"Name: \" + player.fullName}</p>\r\n            <p>{\"Age: \" + player.currentAge}</p>\r\n            <p>{\"Birth Date: \" + player.birthDate}</p>\r\n            <p>\r\n              {\"Born: \" + player.birthCity + \", \" + player.birthStateProvince}\r\n            </p>\r\n            <p>{\"Country: \" + player.birthCountry}</p>\r\n          </div>\r\n          <div className=\"player__bio\">\r\n            <p>{\"Height: \" + player.height + '\"'}</p>\r\n            <p>{\"Weight: \" + player.weight + \"lbs\"}</p>\r\n          </div>\r\n          <div className=\"player__baseballBio\">\r\n            <p>\r\n              {\"Position: \" +\r\n                player.primaryPosition.abbreviation +\r\n                \", \" +\r\n                player.primaryPosition.name}\r\n            </p>\r\n            <p>\r\n              {\"Drafted: \" +\r\n                (player.draftYear ? player.draftYear : \"Not Drafted\")}\r\n            </p>\r\n            <p>{\"Bats: \" + player.batSide.description}</p>\r\n            <p>{\"Throws: \" + player.pitchHand.description}</p>\r\n          </div>\r\n        </main>\r\n      );\r\n    } else {\r\n      return <main>Fetching Player Bio ...</main>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\nimport \"./styles/index.scss\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport Main from \"./Components/Main\";\r\nimport Team from \"./Components/Teams/Team\";\r\nimport Player from \"./Components/Players/Player\";\r\n\r\nconst App: React.FC<any> = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Route exact path=\"/\" component={Main} />\r\n        <Route path=\"/team/:teamid\" component={Team} />\r\n        <Route path=\"/player/:playerid\" component={Player} />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}