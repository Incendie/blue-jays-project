{"version":3,"sources":["Reducers/fetchReducer.ts","Reducers/filterReducer.ts","Reducers/index.ts","store.ts","Components/Teams/Teams.tsx","Actions/fetchActions.ts","Components/Main.tsx","Actions/filterActions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","fetching","fetched","payload","fetchReducer","state","arguments","length","undefined","action","type","_objectSpread","filtered","filterReducer","filterReducer_objectSpread","reducer","combineReducers","fetch","middleware","applyMiddleware","promise","thunk","logger","createStore","Teams","connect","require","store","this","props","dispatch","method","then","response","json","catch","err","teamNames","toFilter","teams","map","team","console","log","target","name","toLowerCase","includes","react_default","a","createElement","className","key","id","src","alt","React","Component","Main","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","search","onSubmit","bind","assertThisInitialized","onChange","e","setState","value","preventDefault","onClick","Teams_Teams","App","es","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.075c179e.chunk.js","sourcesContent":["const initialState = {\n    fetching: false,\n    fetched: false,\n    payload: []\n  },\n  fetchReducer = (state = initialState, action: any) => {\n    switch (action.type) {\n      case 'FETCH_TEAMS_FULFILLED':\n        return { ...state, fetched: true, payload: action.payload };\n      case 'FETCH_FILTERED_EXAMPLES_FULFILLED':\n        return { ...state, fetched: true, payload: action.payload };\n      default:\n        return state;\n    }\n  };\n\nexport default fetchReducer;\n","interface stateTypes {\n  filtered: string;\n}\nconst initialState: stateTypes = {\n  filtered: ''\n};\nconst filterReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case 'FILTER_SUBMITTED':\n      return { ...state, filtered: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { combineReducers } from 'redux';\n\nimport fetchReducer from './fetchReducer';\nimport filterReducer from './filterReducer';\n\nconst reducer = combineReducers({\n  fetch: fetchReducer,\n  filtered: filterReducer\n});\n\nexport type AppState = ReturnType<typeof reducer>;\nexport default reducer;\n","import { applyMiddleware, createStore } from \"redux\";\nimport logger from \"redux-logger\";\nimport promise from \"redux-promise-middleware\";\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"./Reducers\";\n\nconst middleware = applyMiddleware(promise, thunk, logger);\n\nexport default createStore(reducer, middleware);\n","import React from 'react';\nimport { fetchTeams } from '../../Actions/fetchActions';\nimport './styles.scss';\n\nconst { connect } = require('react-redux');\n@connect((store: any) => {\n  return {\n    fetch: store.fetch.payload,\n    filtered: store.filtered.filtered\n  };\n})\nexport default class Teams extends React.Component<any> {\n  componentDidMount() {\n    this.props.dispatch(fetchTeams());\n  }\n\n  public render() {\n    let teamNames,\n      toFilter = this.props.filtered;\n    if (this.props.fetch.teams) {\n      teamNames = this.props.fetch.teams.map((team: any) => {\n        console.log(toFilter.target);\n        if (\n          team.name.toLowerCase().includes(toFilter.target) ||\n          !toFilter.target\n        ) {\n          return (\n            <li className=\"teamList\" key={team.id}>\n              <div className=\"teamList__logo\">\n                <img\n                  src={\n                    'https://www.mlbstatic.com/team-logos/' + team.id + '.svg'\n                  }\n                  alt=\"\"\n                />\n              </div>\n              <p className=\"teamList__name\">{team.name}</p>\n            </li>\n          );\n        } else {\n          return false;\n        }\n      });\n    }\n\n    return (\n      <div id=\"teams\" className=\"wrapper\">\n        <ul>{teamNames ? teamNames : 'Loading Teams'}</ul>\n      </div>\n    );\n  }\n}\n","export function fetchTeams() {\n  return function(dispatch: any) {\n    fetch('https://statsapi.mlb.com/api/v1/teams?sportId=1', {\n      method: 'GET'\n    })\n      .then(response => {\n        dispatch({ type: 'FETCH_TEAMS', payload: response.json() });\n      })\n      .catch(err => {\n        dispatch({ type: 'FETCH_TEAMS', payload: err });\n      });\n  };\n}\n\n// export function fetchOutfitExamples(filter: any) {\n//   return function(dispatch: any) {\n//     axios({\n//       method: \"POST\",\n//       params: {\n//         ckAPIToken:\n//           \"e77360a702ff8b523c437b5346f3eb4f7424667a1cddea61dedb57dbbd2ab42d\"\n//       },\n//       baseURL:\n//         \"https://api.apple-cloudkit.com/database/1/iCloud.com.lookscopeapp.lookscope/development/public/records/query\",\n//       data: {\n//         zoneID: {\n//           zoneName: \"_defaultZone\"\n//         },\n//         query: {\n//           recordType: \"OutfitExampleSmall\",\n//           filterBy: filter\n//         }\n//       }\n//     })\n//       .then(response => {\n//         dispatch({ type: \"FETCH_EXAMPLES_FULFILLED\", payload: response.data });\n//       })\n//       .catch(err => {\n//         dispatch({ type: \"FETCH_EXAMPLES_REJECTED\", payload: err });\n//       });\n//   };\n// }\n\n// export function fetchFilteredOutfits(filter: any) {\n//   return function(dispatch: any) {\n//     axios({\n//       method: \"POST\",\n//       params: {\n//         ckAPIToken:\n//           \"e77360a702ff8b523c437b5346f3eb4f7424667a1cddea61dedb57dbbd2ab42d\"\n//       },\n//       baseURL:\n//         \"https://api.apple-cloudkit.com/database/1/iCloud.com.lookscopeapp.lookscope/development/public/records/query\",\n//       data: {\n//         zoneID: {\n//           zoneName: \"_defaultZone\"\n//         },\n//         query: {\n//           recordType: \"OutfitExampleSmall\",\n//           filterBy: filter\n//         }\n//       }\n//     })\n//       .then(response => {\n//         dispatch({\n//           type: \"FETCH_FILTERED_EXAMPLES_FULFILLED\",\n//           payload: response.data\n//         });\n//       })\n//       .catch(err => {\n//         dispatch({ type: \"FETCH_FILTERED_EXAMPLES_REJECTED\", payload: err });\n//       });\n//   };\n// }\n\n// export function fetchOutfitDetails() {\n//   return function(dispatch: any) {\n//     axios({\n//       method: \"POST\",\n//       params: {\n//         ckAPIToken:\n//           \"e77360a702ff8b523c437b5346f3eb4f7424667a1cddea61dedb57dbbd2ab42d\"\n//       },\n//       baseURL:\n//         \"https://api.apple-cloudkit.com/database/1/iCloud.com.lookscopeapp.lookscope/development/public/records/query\",\n//       data: {\n//         zoneID: {\n//           zoneName: \"_defaultZone\"\n//         },\n//         query: {\n//           recordType: \"OutfitExampleLarge\"\n//         }\n//       }\n//     })\n//       .then(response => {\n//         dispatch({\n//           type: \"FETCH_OUTFIT_DETAILS_FULFILLED\",\n//           payload: response.data\n//         });\n//       })\n//       .catch(err => {\n//         dispatch({ type: \"FETCH_OUTFIT_DETAILS_REJECTED\", payload: err });\n//       });\n//   };\n// }\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport store from '../store';\nimport Teams from './Teams/Teams';\n\nimport { filterSubmitted } from '../Actions/filterActions';\n\nconst { connect } = require('react-redux');\n\ninterface Props {\n  [key: string]: any;\n}\n\ninterface State {\n  search: string;\n}\n\n@connect((store: any) => {\n  return { store };\n})\nexport default class Main extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      search: ''\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e: any) {\n    this.setState({ search: e.target.value });\n  }\n\n  onSubmit(e: any) {\n    e.preventDefault();\n    this.props.dispatch(filterSubmitted(this.state.search));\n  }\n\n  public render() {\n    return (\n      <main>\n        <form onSubmit={this.onSubmit} action=\"submit\">\n          <input type=\"text\" onChange={this.onChange} />\n          <button type=\"button\" onClick={this.onSubmit}>\n            Search\n          </button>\n        </form>\n        <Teams />\n      </main>\n    );\n  }\n}\n","export function filterSubmitted(target: string) {\n  return {\n    type: 'FILTER_SUBMITTED',\n    payload: { target }\n  };\n}\n","import React from 'react';\nimport './styles/index.scss';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport Main from './Components/Main';\n\nconst App: React.FC<any> = () => {\n  return (\n    <Provider store={store}>\n      <h1>Welcome!</h1>\n      <p>What are you looking for today?</p>\n\n      <Main />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}